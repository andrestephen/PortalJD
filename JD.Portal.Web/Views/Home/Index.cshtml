@using System.Web.Optimization
@model JD.Portal.Web.Models.vmHome
@{
    ViewBag.Title = "Início";
    ViewBag.Description = "Acompanhamento das principais informações de " + @DateTime.Now.Year.ToString();
}
@section breadcrumb
{
    <ol class="breadcrumb">
        <li class="active"><i class="fa fa-pie-chart"></i> Início</li>
    </ol>
}
@*<div class="row">
        <div class="col-md-3 col-sm-6 col-xs-12">
            <div class="info-box">
                <span class="info-box-icon bg-red"><i class="ion ion-ios-heart"></i></span>

                <div class="info-box-content">
                    <span class="info-box-text">Atendimentos em andamento</span>
                    <span class="info-box-number">4</span>
                </div>
                <!-- /.info-box-content -->
            </div>
            <!-- /.info-box -->
        </div>
        <!-- /.col -->
        <div class="col-md-3 col-sm-6 col-xs-12">
            <div class="info-box">
                <span class="info-box-icon bg-aqua"><i class="fa fa-cutlery"></i></span>

                <div class="info-box-content">
                    <span class="info-box-text">Cestas básicas no mês</span>
                    <span class="info-box-number">40 de 55</span>
                </div>
                <!-- /.info-box-content -->
            </div>
            <!-- /.info-box -->
        </div>
        <!-- /.col -->
        <!-- fix for small devices only -->
        <div class="clearfix visible-sm-block"></div>

        <div class="col-md-3 col-sm-6 col-xs-12">
            <div class="info-box">
                <span class="info-box-icon bg-green"><i class="fa fa-thumbs-up"></i></span>

                <div class="info-box-content">
                    <span class="info-box-text">Projetos Ativos</span>
                    <span class="info-box-number">7</span>
                </div>
                <!-- /.info-box-content -->
            </div>
            <!-- /.info-box -->
        </div>

        <div class="col-md-3 col-sm-6 col-xs-12">
            <div class="info-box">
                <span class="info-box-icon bg-yellow"><i class="fa fa-dollar"></i></span>

                <div class="info-box-content">
                    <span class="info-box-text">Recursos utilizados</span>
                    <span class="info-box-number">R$ 41.410,00</span>

                    <div class="progress">
                        <div class="progress-bar" style="width: 70%; background: #337ab7;"></div>
                        @{
                            //TODO: remover esse background daqui e colocar um um css do app}
                        }
                    </div>
                    <span class="progress-description">
                        70% de R$ 50.000,00
                    </span>
                </div>
                <!-- /.info-box-content -->
            </div>
            <!-- /.info-box -->
        </div>
    </div>*@
<div class="row">
    <div class="col-md-4">
        <div class="box">
            <div class="box-header">
                <h3 class="box-title">Projetos (@Model.Projetos.Count().ToString())</h3>
            </div>
            <div class="box-body">
                <canvas id="graficoProjetos" style="height: 300px; width: 500px;" height="300" width="500"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="box">
            <div class="box-header">
                <h3 class="box-title">Atendimentos  (@Model.Atendimentos.Count().ToString())</h3>
            </div>
            <div class="box-body">
                <canvas id="graficoAtendimentos" style="height: 300px; width: 500px;" height="300" width="500"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="box">
            <div class="box-header">
                <h3 class="box-title">Visitas  (@Model.Visitas.Count().ToString())</h3>
            </div>
            <div class="box-body">
                <canvas id="graficoVisitas" style="height: 300px; width: 500px;" height="300" width="500"></canvas>
            </div>
        </div>
    </div>
    @*<div class="col-md-4">
            <div class="box">
                <div class="box-header">
                    <h3 class="box-title">Próximo plantão (DD/MM/YYYY)</h3>
                </div>
                <!-- /.box-header -->
                <div class="box-body">
                    <table class="table table-condensed">
                        <tbody>
                            <tr>
                                <th style="width: 10px"></th>
                                <th>Nome</th>
                                <th>Telefone</th>
                                <th style="width: 40px">Atribuição</th>
                            </tr>
                            <tr>
                                <td>1.</td>
                                <td>André Stephen</td>
                                <td>(61) 99999-9999</td>
                                <td><span class="label label-success">Encarregado</span></td>
                            </tr>
                            <tr>
                                <td>2.</td>
                                <td>André Stephen</td>
                                <td>(61) 99999-9999</td>
                                <td><span class="label label-primary">Escalado</span></td>
                            </tr>
                            <tr>
                                <td>3.</td>
                                <td>André Stephen</td>
                                <td>(61) 99999-9999</td>
                                <td><span class="label label-primary">Escalado</span></td>
                            </tr>
                            <tr>
                                <td>4.</td>
                                <td>André Stephen</td>
                                <td>(61) 99999-9999</td>
                                <td><span class="label label-warning">Santa Ceia</span></td>
                            </tr>
                            <tr>
                                <td>5.</td>
                                <td>André Stephen</td>
                                <td>(61) 99999-9999</td>
                                <td><span class="label label-primary">Escalado</span></td>
                            </tr>
                            <tr>
                                <td>6.</td>
                                <td>André Stephen</td>
                                <td>(61) 99999-9999</td>
                                <td><span class="label label-warning">Santa Ceia</span></td>
                            </tr>
                            <tr>
                                <td>7.</td>
                                <td>André Stephen</td>
                                <td>(61) 99999-9999</td>
                                <td><span class="label label-primary">Escalado</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <!-- /.box-body -->
            </div>
        </div>*@
    <div class="col-md-4">
        <div class="box">
            <div class="box-header">
                <h3 class="box-title">Diretoria</h3>
            </div>

            @{
                JD.Portal.Model.Diacono presidente = Model.DiaconosDiretoria.Where(x => x.Perfis.Any(p => p.ID == 2)).FirstOrDefault();
                JD.Portal.Model.Diacono vicepresidente = Model.DiaconosDiretoria.Where(x => x.Perfis.Any(p => p.ID == 3)).FirstOrDefault();
                JD.Portal.Model.Diacono tesoureiro = Model.DiaconosDiretoria.Where(x => x.Perfis.Any(p => p.ID == 4)).FirstOrDefault();
                JD.Portal.Model.Diacono primeirosecretario = Model.DiaconosDiretoria.Where(x => x.Perfis.Any(p => p.ID == 5)).FirstOrDefault();
                JD.Portal.Model.Diacono segundosecretario = Model.DiaconosDiretoria.Where(x => x.Perfis.Any(p => p.ID == 6)).FirstOrDefault();
            }<!-- /.box-header -->
            <div class="box-body">
                <table class="table table-condensed">
                    <tbody>
                        <tr>
                            <th>Cargo</th>
                            <th>Nome</th>
                            <th>Telefone</th>
                        </tr>
                        <tr>
                            <td>Presidente</td>
                            <td>@(presidente != null ? presidente.Nome : "-")</td>
                            <td>@(presidente != null ? presidente.Telefone : "-")</td>
                        </tr>
                        <tr>
                            <td>Vice-Presidente</td>
                            <td>@(vicepresidente != null ? vicepresidente.Nome : "-")</td>
                            <td>@(vicepresidente != null ? vicepresidente.Telefone : "-")</td>
                        </tr>
                        <tr>
                            <td>Tesoureiro</td>
                            <td>@(tesoureiro != null ? tesoureiro.Nome : "-")</td>
                            <td>@(tesoureiro != null ? tesoureiro.Telefone : "-")</td>
                        </tr>
                        <tr>
                            <td>1º Secretário</td>
                            <td>@(primeirosecretario != null ? primeirosecretario.Nome : "-")</td>
                            <td>@(primeirosecretario != null ? primeirosecretario.Telefone : "-")</td>
                        </tr>
                        <tr>
                            <td>2º Secretário</td>
                            <td>@(segundosecretario != null ? segundosecretario.Nome : "-")</td>
                            <td>@(segundosecretario != null ? segundosecretario.Telefone : "-")</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <!-- /.box-body -->
        </div>
    </div>
</div>
@{



}

@section  ViewSpecificJavascript
{
    @Scripts.Render("~/Bundles/chartcss")
    @Scripts.Render("~/Bundles/chartjs")

    <script>
        var ctxProjetos = document.getElementById("graficoProjetos");
        var myChart = new Chart(ctxProjetos, {
            type: 'pie',
            data: {
                labels: ['@Model.Projetos.Where(x => x.Status == 1).Count() Novos', '@Model.Projetos.Where(x => x.Status == 2).Count() Aprovados', '@Model.Projetos.Where(x => x.Status == 3).Count() Não aprovados', '@Model.Projetos.Where(x => x.Status == 4).Count() Concluidos'],
                datasets: [{
                    label: '# of Tomatoes',
                    data: [@Model.Projetos.Where(x => x.Status == 1).Count(), @Model.Projetos.Where(x => x.Status == 2).Count(), @Model.Projetos.Where(x => x.Status == 3).Count(), @Model.Projetos.Where(x => x.Status == 4).Count()],
                    backgroundColor: [
                        '#f39c12',
                        '#00a65a',
                        '#f56954',
                        '#3c8dbc'
                    ],
                    //borderColor: [
                    //    'rgba(255, 206, 86, 1)',
                    //    'rgba(75, 192, 192, 1)',
                    //    'rgba(255,99,132,1)',
                    //    'rgba(54, 162, 235, 1)'
                    //],
                    borderWidth: 1
                }]
            },
            options: {
                cutoutPercentage: 50,
                responsive: true,
                legend: {
                    position: 'bottom'
                }
            }
        });



        var ctxAtendimentos = document.getElementById("graficoAtendimentos");
        var myChart = new Chart(ctxAtendimentos, {
            type: 'pie',
            data: {
                labels: ['@Model.Atendimentos.Where(x => x.Status == true).Count() Em aberto', '@Model.Atendimentos.Where(x => x.Status == false).Count() Arquivados'],
                datasets: [{
                    label: '# of Tomatoes',
                    data: [@Model.Atendimentos.Where(x => x.Status == true).Count(), @Model.Atendimentos.Where(x => x.Status == false).Count()],
                    backgroundColor: [
                        '#f39c12',
                        '#00a65a'
                    ],
                    //borderColor: [
                    //    'rgba(255, 206, 86, 1)',
                    //    'rgba(75, 192, 192, 1)',
                    //    'rgba(255,99,132,1)',
                    //    'rgba(54, 162, 235, 1)'
                    //],
                    borderWidth: 1
                }]
            },
            options: {
                cutoutPercentage: 50,
                responsive: true,
                legend: {
                    position: 'bottom'
                }
            }
        });


        var ctxVisitas = document.getElementById("graficoVisitas");
        var myChart = new Chart(ctxVisitas, {
            type: 'bar',
            data: {
                labels: ['Jan', 'Fev', 'Mar'],
                datasets: [{
                    label: 'Quantidade de visitas por mês',
                    data: [@Model.Visitas.Where(x => x.DataVisita.Month == 1).Count(), @Model.Visitas.Where(x => x.DataVisita.Month == 2).Count(), @Model.Visitas.Where(x => x.DataVisita.Month == 3).Count()],
                    backgroundColor: '#3c8dbc',
                    //borderColor: [
                    //    'rgba(255, 206, 86, 1)',
                    //    'rgba(75, 192, 192, 1)',
                    //    'rgba(255,99,132,1)',
                    //    'rgba(54, 162, 235, 1)'
                    //],
                    borderWidth: 1
                }]
            },
            options: {
                //cutoutPercentage: 50,
                responsive: true,
                legend: {
                    position: 'bottom'
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            min: 0,
                            stepSize: 1
                        }
                    }]
                }
            }
        });

        $(function () {
            /* ChartJS
             * -------
             * Here we will create a few charts using ChartJS
             */

            //--------------
            //- AREA CHART -
            //--------------

            // Get context with jQuery - using jQuery's .get() method.
            var areaChartCanvas = $('#areaChart').get(0).getContext('2d')
            // This will get the first returned node in the jQuery collection.
            var areaChart = new Chart(areaChartCanvas)

            var areaChartData = {
                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
                datasets: [
                    {
                        label: 'Electronics',
                        fillColor: 'rgba(210, 214, 222, 1)',
                        strokeColor: 'rgba(210, 214, 222, 1)',
                        pointColor: 'rgba(210, 214, 222, 1)',
                        pointStrokeColor: '#c1c7d1',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(220,220,220,1)',
                        data: [65, 59, 80, 81, 56, 55, 40]
                    },
                    {
                        label: 'Digital Goods',
                        fillColor: 'rgba(60,141,188,0.9)',
                        strokeColor: 'rgba(60,141,188,0.8)',
                        pointColor: '#3b8bba',
                        pointStrokeColor: 'rgba(60,141,188,1)',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(60,141,188,1)',
                        data: [28, 48, 40, 19, 86, 27, 90]
                    }
                ]
            }

            var areaChartOptions = {
                //Boolean - If we should show the scale at all
                showScale: true,
                //Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: false,
                //String - Colour of the grid lines
                scaleGridLineColor: 'rgba(0,0,0,.05)',
                //Number - Width of the grid lines
                scaleGridLineWidth: 1,
                //Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,
                //Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                //Boolean - Whether the line is curved between points
                bezierCurve: true,
                //Number - Tension of the bezier curve between points
                bezierCurveTension: 0.3,
                //Boolean - Whether to show a dot for each point
                pointDot: false,
                //Number - Radius of each point dot in pixels
                pointDotRadius: 4,
                //Number - Pixel width of point dot stroke
                pointDotStrokeWidth: 1,
                //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
                pointHitDetectionRadius: 20,
                //Boolean - Whether to show a stroke for datasets
                datasetStroke: true,
                //Number - Pixel width of dataset stroke
                datasetStrokeWidth: 2,
                //Boolean - Whether to fill the dataset with a color
                datasetFill: true,
                //String - A legend template
                legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].lineColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>',
                //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                maintainAspectRatio: true,
                //Boolean - whether to make the chart responsive to window resizing
                responsive: true
            }

            //Create the line chart
            areaChart.Line(areaChartData, areaChartOptions)

            //-------------
            //- LINE CHART -
            //--------------
            var lineChartCanvas = $('#lineChart').get(0).getContext('2d')
            var lineChart = new Chart(lineChartCanvas)
            var lineChartOptions = areaChartOptions
            lineChartOptions.datasetFill = false
            lineChart.Line(areaChartData, lineChartOptions)

            //-------------
            //- PIE CHART -
            //-------------
            // Get context with jQuery - using jQuery's .get() method.
            var pieChartCanvas = $('#pieChart').get(0).getContext('2d')
            var pieChart = new Chart(pieChartCanvas)
            var PieData = [
                {
                    value: 700,
                    color: '#f56954',
                    highlight: '#f56954',
                    label: 'Chrome'
                },
                {
                    value: 500,
                    color: '#00a65a',
                    highlight: '#00a65a',
                    label: 'IE'
                },
                {
                    value: 400,
                    color: '#f39c12',
                    highlight: '#f39c12',
                    label: 'FireFox'
                },
                {
                    value: 600,
                    color: '#00c0ef',
                    highlight: '#00c0ef',
                    label: 'Safari'
                },
                {
                    value: 300,
                    color: '#3c8dbc',
                    highlight: '#3c8dbc',
                    label: 'Opera'
                },
                {
                    value: 100,
                    color: '#d2d6de',
                    highlight: '#d2d6de',
                    label: 'Navigator'
                }
            ]
            var pieOptions = {
                //Boolean - Whether we should show a stroke on each segment
                segmentShowStroke: true,
                //String - The colour of each segment stroke
                segmentStrokeColor: '#fff',
                //Number - The width of each segment stroke
                segmentStrokeWidth: 2,
                //Number - The percentage of the chart that we cut out of the middle
                percentageInnerCutout: 50, // This is 0 for Pie charts
                //Number - Amount of animation steps
                animationSteps: 100,
                //String - Animation easing effect
                animationEasing: 'easeOutBounce',
                //Boolean - Whether we animate the rotation of the Doughnut
                animateRotate: true,
                //Boolean - Whether we animate scaling the Doughnut from the centre
                animateScale: false,
                //Boolean - whether to make the chart responsive to window resizing
                responsive: true,
                // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                maintainAspectRatio: true,
                //String - A legend template
                legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'
            }
            //Create pie or douhnut chart
            // You can switch between pie and douhnut using the method below.
            pieChart.Doughnut(PieData, pieOptions)

            //-------------
            //- BAR CHART -
            //-------------
            var barChartCanvas = $('#barChart').get(0).getContext('2d')
            var barChart = new Chart(barChartCanvas)
            var barChartData = areaChartData
            barChartData.datasets[1].fillColor = '#00a65a'
            barChartData.datasets[1].strokeColor = '#00a65a'
            barChartData.datasets[1].pointColor = '#00a65a'
            var barChartOptions = {
                //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
                scaleBeginAtZero: true,
                //Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: true,
                //String - Colour of the grid lines
                scaleGridLineColor: 'rgba(0,0,0,.05)',
                //Number - Width of the grid lines
                scaleGridLineWidth: 1,
                //Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,
                //Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                //Boolean - If there is a stroke on each bar
                barShowStroke: true,
                //Number - Pixel width of the bar stroke
                barStrokeWidth: 2,
                //Number - Spacing between each of the X value sets
                barValueSpacing: 5,
                //Number - Spacing between data sets within X values
                barDatasetSpacing: 1,
                //String - A legend template
                legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>',
                //Boolean - whether to make the chart responsive
                responsive: true,
                maintainAspectRatio: true
            }

            barChartOptions.datasetFill = false
            barChart.Bar(barChartData, barChartOptions)
        })

    </script>
}
